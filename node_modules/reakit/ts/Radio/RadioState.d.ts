import * as React from "react";
import { SealedInitialState } from "reakit-utils/useSealedState";
import { RoverState, RoverActions, RoverInitialState } from "../Rover";
export declare type RadioState = RoverState & {
    /**
     * The `value` attribute of the current checked radio.
     */
    state: any;
};
export declare type RadioActions = RoverActions & {
    /**
     * Sets `state`.
     */
    setState: React.Dispatch<React.SetStateAction<any>>;
};
export declare type RadioInitialState = RoverInitialState & Partial<Pick<RadioState, "state">>;
export declare type RadioStateReturn = RadioState & RadioActions;
declare function useRadioState(initialState?: SealedInitialState<RadioInitialState>): RadioStateReturn;
declare namespace useRadioState {
    var __keys: ("move" | "first" | "last" | "orientation" | "stops" | "currentId" | "unstable_pastId" | "loop" | "register" | "unregister" | "next" | "previous" | "unstable_reset" | "unstable_orientate" | "state" | "setState")[];
}
export default useRadioState;
