'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('reakit-utils/warning');
var React = require('react');
require('reakit-utils/useId');
var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
require('../Box/Box.js');
var __chunk_1 = require('../chunk-002fc018.js');
require('reakit-utils/mergeRefs');
require('reakit-utils/useLiveRef');
var useAllCallbacks = require('reakit-utils/useAllCallbacks');
require('../Tabbable/Tabbable.js');
require('reakit-utils/useSealedState');
require('reakit-utils/usePipe');
require('reakit-utils/useUpdateEffect');
require('reakit-utils/isPromise');
require('reakit-utils/isEmpty');
require('reakit-utils/isObject');
var FormState = require('./FormState.js');
require('./utils/setAllIn.js');
var getIn = require('./utils/getIn.js');
require('reakit-utils/toArray');
require('reakit-utils/isInteger');
require('./utils/setIn.js');
var __chunk_2 = require('../chunk-0ecca8fe.js');
require('../chunk-79808ef5.js');
require('../chunk-c9503aa1.js');
require('../chunk-86b5bbe9.js');
require('../Group/Group.js');
require('./FormGroup.js');
require('reakit-utils/createOnKeyDown');
require('../Rover/RoverState.js');
require('../Rover/Rover.js');
require('../Radio/RadioState.js');
var Radio = require('../Radio/Radio.js');
var FormRadioGroup = require('./FormRadioGroup.js');

var unstable_useFormRadio = createHook.createHook({
  name: "FormRadio",
  compose: Radio.useRadio,
  useState: FormState.unstable_useFormState,
  keys: ["name", "value"],
  useOptions: function useOptions(options) {
    var rover = React.useContext(FormRadioGroup.FormRadioGroupContext);
    var currentChecked = getIn.unstable_getIn(options.values, options.name);
    var checked = currentChecked === options.value;

    if (!rover) {
      // TODO: Better error
      throw new Error("Missing FormRadioGroup");
    }

    return __chunk_1._objectSpread({}, rover, options, {
      checked: checked
    });
  },
  useProps: function useProps(options, _ref) {
    var htmlOnChange = _ref.onChange,
        htmlOnBlur = _ref.onBlur,
        htmlOnFocus = _ref.onFocus,
        htmlProps = __chunk_1._objectWithoutPropertiesLoose(_ref, ["onChange", "onBlur", "onFocus"]);

    var onChange = React.useCallback(function () {
      options.update(options.name, options.value);
    }, [options.update, options.name, options.value]);
    var onBlur = React.useCallback(function () {
      options.blur(options.name);
    }, [options.blur, options.name]);
    var onFocus = React.useCallback(function () {
      options.update(options.name, options.value);
    }, [options.update, options.name, options.value]);
    return __chunk_1._objectSpread({
      name: __chunk_2.formatInputName(options.name),
      onChange: useAllCallbacks.useAllCallbacks(onChange, htmlOnChange),
      onBlur: useAllCallbacks.useAllCallbacks(onBlur, htmlOnBlur),
      onFocus: useAllCallbacks.useAllCallbacks(onFocus, htmlOnFocus)
    }, htmlProps);
  }
});
var unstable_FormRadio = createComponent.createComponent({
  as: "input",
  useHook: unstable_useFormRadio
});

exports.unstable_FormRadio = unstable_FormRadio;
exports.unstable_useFormRadio = unstable_useFormRadio;
