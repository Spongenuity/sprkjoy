'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('reakit-utils/useId');
var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
require('../Box/Box.js');
var __chunk_1 = require('../chunk-002fc018.js');
require('reakit-utils/mergeRefs');
require('reakit-utils/useLiveRef');
var useAllCallbacks = require('reakit-utils/useAllCallbacks');
require('../Tabbable/Tabbable.js');
var Button = require('../Button/Button.js');
require('reakit-utils/useSealedState');
require('reakit-utils/useUpdateEffect');
require('reakit-utils/isPromise');
require('reakit-utils/isEmpty');
require('reakit-utils/isObject');
var FormState = require('./FormState.js');
require('./utils/setAllIn.js');
require('./utils/getIn.js');
require('reakit-utils/toArray');
require('reakit-utils/isInteger');
require('./utils/setIn.js');
require('../chunk-0ecca8fe.js');
var __chunk_3 = require('../chunk-79808ef5.js');
var __chunk_6 = require('../chunk-a32b9175.js');

var unstable_useFormRemoveButton = createHook.createHook({
  name: "FormRemoveButton",
  compose: Button.useButton,
  useState: FormState.unstable_useFormState,
  keys: ["name", "index"],
  useProps: function useProps(options, _ref) {
    var htmlOnClick = _ref.onClick,
        htmlProps = __chunk_1._objectWithoutPropertiesLoose(_ref, ["onClick"]);

    var onClick = React.useCallback(function () {
      options.remove(options.name, options.index);
      var inputId = __chunk_3.getInputId(options.name, options.baseId);
      if (!inputId) return;
      window.requestAnimationFrame(function () {
        var selector = "[id^=\"" + inputId + "-\"]";
        var inputs = document.querySelectorAll(selector);

        if (inputs.length) {
          var inputsArray = Array.from(inputs);
          var nextIdx = inputsArray.reduce(function (_final, input) {
            var match = input.id.match(new RegExp(inputId + "-([0-9]+)"));
            if (!match) return _final;
            var idx = match[1];

            if (Number(idx) > _final && options.index >= _final) {
              return Number(idx);
            }

            return _final;
          }, 0);
          var nextSelector = "[id^=\"" + inputId + "-" + nextIdx + "\"]";
          var input = document.querySelector(nextSelector);

          if (input) {
            input.focus();
            return;
          }
        }

        var pushButtonId = __chunk_6.getPushButtonId(options.name, options.baseId);

        if (pushButtonId) {
          var pushButton = document.getElementById(pushButtonId);

          if (pushButton) {
            pushButton.focus();
          }
        }
      });
    }, [options.remove, options.name, options.index, options.baseId]);
    return __chunk_1._objectSpread({
      onClick: useAllCallbacks.useAllCallbacks(onClick, htmlOnClick)
    }, htmlProps);
  }
});
var unstable_FormRemoveButton = createComponent.createComponent({
  as: "button",
  useHook: unstable_useFormRemoveButton
});

exports.unstable_FormRemoveButton = unstable_FormRemoveButton;
exports.unstable_useFormRemoveButton = unstable_useFormRemoveButton;
