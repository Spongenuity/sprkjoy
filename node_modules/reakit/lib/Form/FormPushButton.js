'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('reakit-utils/useId');
var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
require('../Box/Box.js');
var __chunk_1 = require('../chunk-002fc018.js');
require('reakit-utils/mergeRefs');
require('reakit-utils/useLiveRef');
var useAllCallbacks = require('reakit-utils/useAllCallbacks');
require('../Tabbable/Tabbable.js');
var Button = require('../Button/Button.js');
require('reakit-utils/useSealedState');
require('reakit-utils/useUpdateEffect');
require('reakit-utils/isPromise');
require('reakit-utils/isEmpty');
require('reakit-utils/isObject');
var FormState = require('./FormState.js');
require('./utils/setAllIn.js');
var getIn = require('./utils/getIn.js');
require('reakit-utils/toArray');
require('reakit-utils/isInteger');
require('./utils/setIn.js');
var __chunk_2 = require('../chunk-0ecca8fe.js');
var __chunk_3 = require('../chunk-79808ef5.js');
var __chunk_6 = require('../chunk-a32b9175.js');

var unstable_useFormPushButton = createHook.createHook({
  name: "FormPushButton",
  compose: Button.useButton,
  useState: FormState.unstable_useFormState,
  keys: ["name", "value"],
  useProps: function useProps(options, _ref) {
    var htmlOnClick = _ref.onClick,
        htmlProps = __chunk_1._objectWithoutPropertiesLoose(_ref, ["onClick"]);

    var onClick = React.useCallback(function () {
      options.push(options.name, options.value);

      var _unstable_getIn = getIn.unstable_getIn(options.values, options.name, []),
          length = _unstable_getIn.length;

      var inputId = __chunk_3.getInputId(__chunk_2.formatInputName(options.name, "-") + "-" + length, options.baseId);
      if (!inputId) return;
      window.requestAnimationFrame(function () {
        var selector = "[id^=\"" + inputId + "\"]";
        var input = document.querySelector(selector);

        if (input) {
          input.focus();
        }
      });
    }, [options.push, options.name, options.value, options.values, options.baseId]);
    return __chunk_1._objectSpread({
      id: __chunk_6.getPushButtonId(options.name, options.baseId),
      onClick: useAllCallbacks.useAllCallbacks(onClick, htmlOnClick)
    }, htmlProps);
  }
});
var unstable_FormPushButton = createComponent.createComponent({
  as: "button",
  useHook: unstable_useFormPushButton
});

exports.unstable_FormPushButton = unstable_FormPushButton;
exports.unstable_useFormPushButton = unstable_useFormPushButton;
