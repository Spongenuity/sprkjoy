import { isObject } from './isObject.js';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

var jestSerializerStripFunctions = {
  test: function test(val) {
    return isObject(val) && !Array.isArray(val) && Object.values(val).find(function (v) {
      return typeof v === "function";
    });
  },
  print: function print(val, serialize) {
    return serialize(Object.keys(val).filter(function (key) {
      return typeof val[key] !== "function";
    }).reduce(function (acc, curr) {
      var _objectSpread2;

      return _objectSpread({}, acc, (_objectSpread2 = {}, _objectSpread2[curr] = val[curr], _objectSpread2));
    }, {}));
  }
};

export { jestSerializerStripFunctions };
